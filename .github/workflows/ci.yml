name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.19', '1.20', '1.21', '1.22']
        redis-version: [6, 7]

    services:
      redis:
        image: redis:${{ matrix.redis-version }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Remove old Go
      run: |
        sudo rm -rf /usr/local/go
        sudo rm -rf /opt/hostedtoolcache/go/1.2.2

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: false

    - name: Verify Go installation
      run: |
        echo "Expected Go version: ${{ matrix.go-version }}"
        echo "Actual Go version: $(go version)"
        echo "Go root: ${GOROOT:-not set}"
        echo "Go path: ${GOPATH:-not set}"
        echo "Which go: $(which go)"
        echo "PATH: $PATH"
        
        # Verify we have go modules support
        if ! go help mod >/dev/null 2>&1; then
          echo "ERROR: Go modules not supported in this Go version"
          go help
          exit 1
        fi
        echo "âœ“ Go modules supported"
        
        # Verify minimum Go version for modules
        GO_VERSION=$(go version | cut -d' ' -f3 | cut -d'.' -f1-2 | sed 's/go//')
        if [ "$(printf '%s\n' "1.11" "$GO_VERSION" | sort -V | head -n1)" != "1.11" ]; then
          echo "ERROR: Go version $GO_VERSION is too old for modules (requires >= 1.11)"
          exit 1
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -coverpkg=./... ./tests/...

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./tests/...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache: false

    - name: Verify Go installation
      run: |
        echo "Expected Go version: 1.22"
        echo "Go version: $(go version)"
        # Ensure correct Go is in PATH
        if [ -d "/opt/hostedtoolcache/go/1.22" ]; then
          export GOROOT="/opt/hostedtoolcache/go/1.22/x64"
          export PATH="$GOROOT/bin:$PATH"
          echo "GOROOT=$GOROOT" >> $GITHUB_ENV
          echo "$GOROOT/bin" >> $GITHUB_PATH
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-
          ${{ runner.os }}-go-

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache: false

    - name: Verify Go installation
      run: |
        echo "Expected Go version: 1.22"
        echo "Go version: $(go version)"
        # Ensure correct Go is in PATH
        if [ -d "/opt/hostedtoolcache/go/1.22" ]; then
          export GOROOT="/opt/hostedtoolcache/go/1.22/x64"
          export PATH="$GOROOT/bin:$PATH"
          echo "GOROOT=$GOROOT" >> $GITHUB_ENV
          echo "$GOROOT/bin" >> $GITHUB_PATH
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-
          ${{ runner.os }}-go-

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache: false

    - name: Verify Go installation
      run: |
        echo "Expected Go version: 1.22"
        echo "Go version: $(go version)"
        # Ensure correct Go is in PATH
        if [ -d "/opt/hostedtoolcache/go/1.22" ]; then
          export GOROOT="/opt/hostedtoolcache/go/1.22/x64"
          export PATH="$GOROOT/bin:$PATH"
          echo "GOROOT=$GOROOT" >> $GITHUB_ENV
          echo "$GOROOT/bin" >> $GITHUB_PATH
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-
          ${{ runner.os }}-go-

    - name: Build
      run: go build -v ./...

    - name: Test build for different OS/ARCH
      run: |
        GOOS=linux GOARCH=amd64 go build ./...
        GOOS=linux GOARCH=arm64 go build ./...
        GOOS=darwin GOARCH=amd64 go build ./...
        GOOS=darwin GOARCH=arm64 go build ./...
        GOOS=windows GOARCH=amd64 go build ./...
